(set-info :status unknown)
(declare-fun present_0 () Bool)
(declare-fun clean_0 () Bool)
(declare-fun garbage_0 () Bool)
(declare-fun quiet_0 () Bool)
(declare-fun dinner_0 () Bool)
(declare-fun garbage_3 () Bool)
(declare-fun present_3 () Bool)
(declare-fun dinner_3 () Bool)
(declare-fun quiet_3 () Bool)
(declare-fun garbage_2 () Bool)
(declare-fun dolly_2 () Bool)
(declare-fun clean_3 () Bool)
(declare-fun carry_2 () Bool)
(declare-fun quiet_2 () Bool)
(declare-fun wrap_2 () Bool)
(declare-fun clean_2 () Bool)
(declare-fun cook_2 () Bool)
(declare-fun garbage_1 () Bool)
(declare-fun dolly_1 () Bool)
(declare-fun carry_1 () Bool)
(declare-fun present_2 () Bool)
(declare-fun quiet_1 () Bool)
(declare-fun wrap_1 () Bool)
(declare-fun dinner_2 () Bool)
(declare-fun clean_1 () Bool)
(declare-fun cook_1 () Bool)
(declare-fun dolly_0 () Bool)
(declare-fun carry_0 () Bool)
(declare-fun present_1 () Bool)
(declare-fun wrap_0 () Bool)
(declare-fun dinner_1 () Bool)
(declare-fun cook_0 () Bool)
(assert
 (and (not dinner_0) quiet_0 garbage_0 clean_0 (not present_0)))
(assert
 (let (($x22 (not garbage_3)))
 (and dinner_3 present_3 $x22)))
(assert
 (let (($x197 (=> dolly_2 (and (and garbage_2) (and (not garbage_3) (not quiet_3))))))
 (let (($x202 (=> carry_2 (and (and garbage_2) (and (not garbage_3) (not clean_3))))))
 (let (($x91 (=> dolly_1 (and (and garbage_1) (and (not garbage_2) (not quiet_2))))))
 (let (($x50 (=> carry_1 (and (and garbage_1) (and (not garbage_2) (not clean_2))))))
 (let (($x98 (=> dolly_0 (and (and garbage_0) (and (not garbage_1) (not quiet_1))))))
 (let (($x100 (=> carry_0 (and (and garbage_0) (and (not garbage_1) (not clean_1))))))
 (and (=> cook_0 (and (and clean_0) (and dinner_1))) (=> wrap_0 (and (and quiet_0) (and present_1))) $x100 $x98 (=> cook_1 (and (and clean_1) (and dinner_2))) (=> wrap_1 (and (and quiet_1) (and present_2))) $x50 $x91 (=> cook_2 (and (and clean_2) (and dinner_3))) (=> wrap_2 (and (and quiet_2) (and present_3))) $x202 $x197))))))))
(assert
 (and (or (not cook_0) (not wrap_0)) (or (not cook_0) (not carry_0)) (or (not cook_0) (not dolly_0)) (or (not wrap_0) (not carry_0)) (or (not wrap_0) (not dolly_0)) (or (not carry_0) (not dolly_0)) (or (not cook_1) (not wrap_1)) (or (not cook_1) (not carry_1)) (or (not cook_1) (not dolly_1)) (or (not wrap_1) (not carry_1)) (or (not wrap_1) (not dolly_1)) (or (not carry_1) (not dolly_1)) (or (not cook_2) (not wrap_2)) (or (not cook_2) (not carry_2)) (or (not cook_2) (not dolly_2)) (or (not wrap_2) (not carry_2)) (or (not wrap_2) (not dolly_2)) (or (not carry_2) (not dolly_2))))
(assert
 (and (=> (and (not dinner_0) dinner_1) (or cook_0)) (=> (and quiet_0 (not quiet_1)) (or dolly_0)) (=> (and garbage_0 (not garbage_1)) (or carry_0 dolly_0)) (=> (and clean_0 (not clean_1)) (or carry_0)) (=> (and (not present_0) present_1) (or wrap_0)) (=> (and (not dinner_1) dinner_2) (or cook_1)) (=> (and quiet_1 (not quiet_2)) (or dolly_1)) (=> (and garbage_1 (not garbage_2)) (or carry_1 dolly_1)) (=> (and clean_1 (not clean_2)) (or carry_1)) (=> (and (not present_1) present_2) (or wrap_1)) (=> (and (not dinner_2) dinner_3) (or cook_2)) (=> (and quiet_2 (not quiet_3)) (or dolly_2)) (=> (and garbage_2 (not garbage_3)) (or carry_2 dolly_2)) (=> (and clean_2 (not clean_3)) (or carry_2)) (=> (and (not present_2) present_3) (or wrap_2))))
(check-sat)
(get-model)